import pandas as pd
import os
import random
import numpy as np

def store_data(dataframe:pd.DataFrame, file_path:str, append: bool = False):
    """
    Creates or completes a csv based on the supplied dataframe
    :param dataframe: Pandas dataframe containing the various data generated by the perceptron during training.
    :param file_path: Path to the csv file containing the data to be stored.
    :return: returns None
    """
    if append and os.path.isfile(file_path):
        existing_df = pd.read_csv(file_path, sep=",", index_col=0)
        big_dataframe = pd.concat([existing_df, dataframe], axis=0, ignore_index=True)
    else:
        big_dataframe = dataframe
    # big_dataframe = big_dataframe.sort_values(by="Iteration")
    big_dataframe.to_csv(file_path, index=False, sep=",", mode="w", header=False)

def p_data_to_dataframe(iteration:int, weights:list, variables:list, obtained_value:float, expected_value:float):
    """
    Retrieves the various data generated by the perceptron and stores them in a pandas dataframe.
    :param iteration: Iteration number of the loop
    :param weights: Weights of the perceptron during the iteration.
    :param variables: Variables of the perceptron during the iteration.
    :param obtained_value: Obtained value of the perceptron during the iteration.
    :param expected_value: Expected value of the perceptron during the training.
    :return: returns a Pandas Dataframe
    """
    p_data = {
        "Iteration" : [iteration],
        "Weights":[weights],
        "Variables":[variables],
        "Obtained_value": obtained_value,
        "Expected_value": expected_value
    }
    return pd.DataFrame(p_data)


def load_dataframe_from_file(file_name: str, nbr_labels: int=1, add_x0: bool = True):
    """
    Load data from a CSV file and return it as a DataFrame with 'input' and 'label(s)' columns.

    :param add_x0: True if adding x0 is needed, False otherwise.
    :param file_name: Path to the CSV file.
    :param nbr_labels: Number of label columns at the end of the file.
    :return: A pandas DataFrame with 'input' and 'label(s)' columns.
    """
    df = pd.read_csv(file_name, sep=",", header=None)
    if add_x0:
        df.insert(0, "x0", 1)

    if nbr_labels == 0:
        inputs = df.iloc[:, -nbr_labels:].values

        result = pd.DataFrame({
            "inputs": [np.array(row) for row in inputs]
        })

    else:
        inputs = df.iloc[:, :-nbr_labels].values
        labels = df.iloc[:, -nbr_labels:].values

        result = pd.DataFrame({
            "inputs": [np.array(row) for row in inputs],
            "label": [np.array(row) for row in labels]
        })

        if nbr_labels == 1:
            result["label"] = result["label"].apply(lambda x: x[0])
            return result[["inputs", "label"]]

    return result


if __name__ == "__main__":
    df = load_dataframe_from_file("../datasets/table_4_14.csv", nbr_labels=3, add_x0=False)
    store_data(df, file_path="./data.csv", append=False)
    print(load_dataframe_from_file("./data.csv", add_x0=False))
